version: 2.1

orbs:
  aws-cli: circleci/aws-cli@0.1.13

######################### Environment #########################

base_image: &base_image
  alpine/terragrunt
working_directory: &working_directory
  ~/repo

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory

parameter_config: &parameter_config
  parameters:
    ENV:
      type: string
    SERVICE:
      type: string

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

set_environment: &set_environment
 run:
  name: Set Environmental Variables
  command: |
      cd && touch $BASH_ENV
      echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY' >> $BASH_ENV
      echo 'export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY' >> $BASH_ENV
      echo 'export ENV=<<parameters.ENV>>' >> $BASH_ENV
      echo 'export SERVICE=<<parameters.SERVICE>>' >> $BASH_ENV
      echo 'export AWS_REGION=$REGION' >> $BASH_ENV

######################### Steps #########################

restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

terragrunt_init: &terragrunt_init
  run:
    name: Terragrunt Init
    command: |
      mkdir -p ~/.ssh && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
      source $BASH_ENV
      cd $ENV/$SERVICE/
      terragrunt init --terragrunt-non-interactive

terragrunt_plan: &terragrunt_plan
  run:
    name: Terragrunt Plan
    command: |
      source $BASH_ENV
      cd $ENV/$SERVICE/
      terragrunt plan --terragrunt-non-interactive

terragrunt_apply: &terragrunt_apply
  run:
    name: Terragrunt Apply
    command: |
      source $BASH_ENV
      cd $ENV/$SERVICE/
      terragrunt apply --terragrunt-non-interactive -auto-approve

######################### Jobs #########################

jobs:
  terragrunt-plan:
    <<: *default_config
    <<: *parameter_config
    steps:
      - checkout
      - *set_environment
      - *save_repo
      - *terragrunt_init
      - *terragrunt_plan

  terragrunt-apply:
    <<: *default_config
    <<: *parameter_config
    steps:
      - *restore_repo
      - *set_environment
      - attach_workspace:
          at: *working_directory
      - *terragrunt_init
      - *terragrunt_apply

######################### Workflows #########################

workflows:
  version: 2.1

  deploy-preprod-core-sns:
    jobs:
      - terragrunt-plan:
          ENV: preprod
          SERVICE: core-sns
          filters:
            branches:
              ignore:
                - release
      - terragrunt-apply:
          ENV: preprod
          SERVICE: core-sns
          requires:
            - terragrunt-plan
          filters:
            branches:
              only: master

  deploy-prod-core-sns:
    jobs:
      - terragrunt-plan:
          ENV: prod
          SERVICE: core-sns
          filters:
            branches:
              only: release

      - terragrunt-apply:
          ENV: prod
          SERVICE: core-sns
          requires:
            - terragrunt-plan
          filters:
            branches:
              only: release

  deploy-preprod-s3-data-lake:
    jobs:
      - terragrunt-plan:
          ENV: preprod
          SERVICE: s3-data-lake
          filters:
            branches:
              ignore:
                - release
      - terragrunt-apply:
          ENV: preprod
          SERVICE: s3-data-lake
          requires:
            - terragrunt-plan
          filters:
            branches:
              only: master

  deploy-prod-s3-data-lake:
    jobs:
      - terragrunt-plan:
          ENV: prod
          SERVICE: s3-data-lake
          filters:
            branches:
              only: release

      - terragrunt-apply:
          ENV: prod
          SERVICE: s3-data-lake
          requires:
            - terragrunt-plan
          filters:
            branches:
              only: release
